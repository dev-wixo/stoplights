openapi: 3.1.0
x-stoplight:
  id: zgixzbtzqcm3m
info:
  title: UDF.FileManager
  version: '1.0'
  summary: UDF File Manager Service
  description: UDF File Manager Service
  contact:
    name: UDF Team
servers:
  - url: 'http://localhost'
    description: Local File Service
paths:
  /api/files:
    get:
      summary: List Files and Folder
      tags:
        - files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageToken:
                    type: string
                    description: The token to get next page of the files.
                  files:
                    type: array
                    description: the list of files.
                    items:
                      type: string
      operationId: get-api-files
      description: List File and Folders
      parameters:
        - schema:
            type: string
          in: query
          name: path
          description: the prefix path of the folder would like to get files
        - schema:
            type: number
            default: 100
          in: query
          name: pagesize
          description: the number of files will be return for each request.
        - schema:
            type: string
          in: query
          name: pageToken
          description: provide this token to get next page.
    post:
      summary: Upload File
      operationId: post-api-files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  filePath:
                    type: string
                    description: The path of uploaded file.
                required:
                  - filePath
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                  errorMessage:
                    type: string
              examples:
                File Existed:
                  value:
                    errorCode: File_Existed
                    errorMessage: The uploading file name is existed
      description: Upload File
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: using the form data to allow to upload file as a stream
              properties:
                fileName:
                  type: string
                  description: the name and extension of the file
                path:
                  type: string
                  description: the folder to store the file. If not provided the file will be uploaded into the Root folder.
                fileData:
                  type: object
                  description: The binary of the file.
              required:
                - fileName
      tags:
        - files
    delete:
      summary: Delete File
      operationId: delete-api-files
      responses:
        '200':
          description: OK
      description: This will be a soft delete files by moving files to a archive folder with prefix is Archive_OriginalFileName_Timestamp.ext
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filePath:
                  type: string
                  description: The location of the file want to be delete
              required:
                - filePath
      tags:
        - files
  '/api/files/:download':
    post:
      summary: Download File
      operationId: 'post-api-files-:download'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: The File stream + file name
      description: Download file
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filePath:
                  type: string
              required:
                - filePath
      tags:
        - files
components:
  schemas: {}
  securitySchemes:
    Authorization:
      name: Bearer Token
      type: apiKey
      in: header
security:
  - Authorization: []
